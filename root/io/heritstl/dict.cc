//
// File generated by rootcint at Fri Aug  2 17:11:52 2002.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

#include "dict.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "RtypesImp.h"

namespace ROOT {
   namespace Shadow {
   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void PlexItem_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *PlexItem_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const PlexItem*)
   {
      PlexItem *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("PlexItem", PlexItem::Class_Version(), "classes.C", 6,
                  typeid(PlexItem), DefineBehavior(ptr, ptr),
                  &::PlexItem::Dictionary, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const PlexItem*)0x0);
}

namespace ROOT {
   void PlexSTL_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *PlexSTL_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const PlexSTL*)
   {
      PlexSTL *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("PlexSTL", PlexSTL::Class_Version(), "classes.C", 14,
                  typeid(PlexSTL), DefineBehavior(ptr, ptr),
                  &::PlexSTL::Dictionary, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const PlexSTL*)0x0);
}

namespace ROOT {
   void vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   void vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_Dictionary();

   TClass *vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const vector<PlexItem,allocator<PlexItem> >*)
   {
      vector<PlexItem,allocator<PlexItem> > *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("vector<PlexItem,allocator<PlexItem> >", "prec_stl/vector", 32,
                  typeid(vector<PlexItem,allocator<PlexItem> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_Dictionary, &vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_IsA, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const vector<PlexItem,allocator<PlexItem> >*)0x0);

   // Dictionary for non-ClassDef classes
   void vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_Dictionary() {
      ROOT::GenerateInitInstance((const vector<PlexItem,allocator<PlexItem> >*)0x0)->GetClass();
   }

   // Return the actual TClass for the object argument
   TClass *vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_IsA(const void *obj) {
      return gROOT->GetClass(typeid(*(vector<PlexItem,allocator<PlexItem> >*)obj));
   }
}

namespace ROOT {
   void Object_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   TClass *Object_IsA(const void*);

   // Function generating the singleton type initializer
   TGenericClassInfo *GenerateInitInstance(const Object*)
   {
      Object *ptr = 0;
      static ROOT::TGenericClassInfo 
         instance("Object", Object::Class_Version(), "classes.C", 21,
                  typeid(Object), DefineBehavior(ptr, ptr),
                  &::Object::Dictionary, 4);
      return &instance;
   }
   // Static variable to force the class initialization
   static ROOT::TGenericClassInfo *_R__UNIQUE_(Init)
      = GenerateInitInstance((const Object*)0x0);
}

//______________________________________________________________________________
TClass *PlexItem::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PlexItem::Class_Name()
{
   return "PlexItem";
}

//______________________________________________________________________________
const char *PlexItem::ImplFileName()
{
   return ROOT::GenerateInitInstance((const PlexItem*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PlexItem::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const PlexItem*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PlexItem::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const PlexItem*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PlexItem::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const PlexItem*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PlexSTL::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PlexSTL::Class_Name()
{
   return "PlexSTL";
}

//______________________________________________________________________________
const char *PlexSTL::ImplFileName()
{
   return ROOT::GenerateInitInstance((const PlexSTL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PlexSTL::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const PlexSTL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PlexSTL::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const PlexSTL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PlexSTL::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const PlexSTL*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Object::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Object::Class_Name()
{
   return "Object";
}

//______________________________________________________________________________
const char *Object::ImplFileName()
{
   return ROOT::GenerateInitInstance((const Object*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Object::ImplFileLine()
{
   return ROOT::GenerateInitInstance((const Object*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Object::Dictionary()
{
   fgIsA = ROOT::GenerateInitInstance((const Object*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Object::Class()
{
   if (!fgIsA) fgIsA = ROOT::GenerateInitInstance((const Object*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void R__Object_vect(TBuffer &R__b, void *R__p, int)
{
   PlexSTL &vect = *(PlexSTL *)R__p;
   if (R__b.IsReading()) {
      vect.Streamer(R__b);
   } else {
      vect.Streamer(R__b);
   }
}

//______________________________________________________________________________
void Object::Streamer(TBuffer &R__b)
{
   // Stream an object of class Object.

   if (R__b.IsReading()) {
      Object::Class()->ReadBuffer(R__b, this);
   } else {
      Object::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void Object::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Object.

      TClass *R__cl = Object::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "vect", &vect);
      vect.ShowMembers(R__insp, strcat(R__parent,"vect.")); R__parent[R__ncp] = 0;
      R__cl->SetStreamer("vect",R__Object_vect);
      TNamed::ShowMembers(R__insp, R__parent);
}

//______________________________________________________________________________
void PlexSTL::Streamer(TBuffer &R__b)
{
   // Stream an object of class PlexSTL.

   if (R__b.IsReading()) {
      PlexSTL::Class()->ReadBuffer(R__b, this);
      {
         clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            PlexItem R__t;
            R__t.Streamer(R__b);
            push_back(R__t);
         }
      }
   } else {
      PlexSTL::Class()->WriteBuffer(R__b, this);
      {
         R__b << int(size());
         vector<PlexItem,allocator<PlexItem> >::iterator R__k;
         for (R__k = begin(); R__k != end(); ++R__k) {
            (*R__k).Streamer(R__b);
         }
      }
   }
}

//______________________________________________________________________________
void PlexSTL::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class PlexSTL.

      TClass *R__cl = PlexSTL::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      ROOT::GenericShowMembers("vector<PlexItem,allocator<PlexItem> >", dynamic_cast< vector<PlexItem,allocator<PlexItem> > *>(this ), R__insp, R__parent, false);
}

//______________________________________________________________________________
void PlexItem::Streamer(TBuffer &R__b)
{
   // Stream an object of class PlexItem.

   if (R__b.IsReading()) {
      PlexItem::Class()->ReadBuffer(R__b, this);
   } else {
      PlexItem::Class()->WriteBuffer(R__b, this);
   }
}

//______________________________________________________________________________
void PlexItem::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class PlexItem.

      TClass *R__cl = PlexItem::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
}

/********************************************************
* dict.cc
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtabledict();

extern "C" void G__set_cpp_environmentdict() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("classes.C");
  G__cpp_reset_tagtabledict();
}
class G__dictdOcc_tag {};

void* operator new(size_t size,G__dictdOcc_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__dictdOcc_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_dictdOcc() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevdict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* PlexItem */
static int G__PlexItem_PlexItem_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   PlexItem *p=NULL;
   if(G__getaryconstruct()) p=new PlexItem[G__getaryconstruct()];
   else p=::new((G__dictdOcc_tag*)G__getgvp()) PlexItem;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_PlexItem);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_Class_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)PlexItem::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_Class_Name_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexItem::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_Class_Version_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)PlexItem::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_Dictionary_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      PlexItem::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_IsA_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const PlexItem*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_ShowMembers_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexItem*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_Streamer_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexItem*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_StreamerNVirtual_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexItem*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_DeclFileName_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexItem::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_ImplFileLine_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)PlexItem::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_ImplFileName_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexItem::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexItem_DeclFileLine_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)PlexItem::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PlexItem_PlexItem_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   PlexItem *p;
   p=new PlexItem(*(PlexItem*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__dictLN_PlexItem);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PlexItem G__TPlexItem;
static int G__PlexItem_wAPlexItem_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (PlexItem *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((PlexItem *)((G__getstructoffset())+sizeof(PlexItem)*i))->~G__TPlexItem();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((PlexItem *)(G__getstructoffset()))->~G__TPlexItem();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PlexSTL */
static int G__PlexSTL_PlexSTL_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   PlexSTL *p=NULL;
   if(G__getaryconstruct()) p=new PlexSTL[G__getaryconstruct()];
   else p=::new((G__dictdOcc_tag*)G__getgvp()) PlexSTL;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_PlexSTL);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_Class_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)PlexSTL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_Class_Name_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexSTL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_Class_Version_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)PlexSTL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_Dictionary_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      PlexSTL::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_IsA_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const PlexSTL*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_ShowMembers_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexSTL*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_Streamer_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexSTL*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_StreamerNVirtual_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((PlexSTL*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_DeclFileName_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexSTL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_ImplFileLine_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)PlexSTL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_ImplFileName_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)PlexSTL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PlexSTL_DeclFileLine_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)PlexSTL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PlexSTL_PlexSTL_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   PlexSTL *p;
   p=new PlexSTL(*(PlexSTL*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__dictLN_PlexSTL);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PlexSTL G__TPlexSTL;
static int G__PlexSTL_wAPlexSTL_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (PlexSTL *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((PlexSTL *)((G__getstructoffset())+sizeof(PlexSTL)*i))->~G__TPlexSTL();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((PlexSTL *)(G__getstructoffset()))->~G__TPlexSTL();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<PlexItem,allocator<PlexItem> > */
static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_begin_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >::iterator *pobj,xobj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->begin();
        pobj=new vector<PlexItem,allocator<PlexItem> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_end_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >::iterator *pobj,xobj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->end();
        pobj=new vector<PlexItem,allocator<PlexItem> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_rbegin_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >::reverse_iterator *pobj,xobj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->rbegin();
        pobj=new vector<PlexItem,allocator<PlexItem> >::reverse_iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_rend_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >::reverse_iterator *pobj,xobj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->rend();
        pobj=new vector<PlexItem,allocator<PlexItem> >::reverse_iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_size_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_max_size_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_capacity_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,104,(long)((const vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_empty_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,103,(long)((const vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_operatoroBcB_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        PlexItem& obj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->operator[]((vector<PlexItem,allocator<PlexItem> >::size_type)G__int(libp->para[0]));
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<PlexItem,allocator<PlexItem> > *p=NULL;
   if(G__getaryconstruct()) p=new vector<PlexItem,allocator<PlexItem> >[G__getaryconstruct()];
   else p=::new((G__dictdOcc_tag*)G__getgvp()) vector<PlexItem,allocator<PlexItem> >;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<PlexItem,allocator<PlexItem> > *p=NULL;
   switch(libp->paran) {
   case 2:
      p = ::new((G__dictdOcc_tag*)G__getgvp()) vector<PlexItem,allocator<PlexItem> >((vector<PlexItem,allocator<PlexItem> >::size_type)G__int(libp->para[0]),*(PlexItem*)libp->para[1].ref);
      break;
   case 1:
      p = ::new((G__dictdOcc_tag*)G__getgvp()) vector<PlexItem,allocator<PlexItem> >((vector<PlexItem,allocator<PlexItem> >::size_type)G__int(libp->para[0]));
      break;
   }
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<PlexItem,allocator<PlexItem> > *p=NULL;
      p=::new((G__dictdOcc_tag*)G__getgvp()) vector<PlexItem,allocator<PlexItem> >(*(vector<PlexItem,allocator<PlexItem> >*)libp->para[0].ref);
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   vector<PlexItem,allocator<PlexItem> > *p=NULL;
      p=::new((G__dictdOcc_tag*)G__getgvp()) vector<PlexItem,allocator<PlexItem> >(*((vector<PlexItem,allocator<PlexItem> >::const_iterator*)G__int(libp->para[0])),*((vector<PlexItem,allocator<PlexItem> >::const_iterator*)G__int(libp->para[1])));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_operatoreQ_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >& obj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->operator=(*(vector<PlexItem,allocator<PlexItem> >*)libp->para[0].ref);
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_reserve_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->reserve((vector<PlexItem,allocator<PlexItem> >::size_type)G__int(libp->para[0]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_front_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        PlexItem& obj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->front();
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_back_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        PlexItem& obj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->back();
         result7->ref=(long)(&obj); result7->obj.i=(long)(&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_push_back_8_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->push_back(*(PlexItem*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_swap_9_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->swap(*(vector<PlexItem,allocator<PlexItem> >*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_0_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      {
        vector<PlexItem,allocator<PlexItem> >::iterator *pobj,xobj=((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->insert(*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[0])),*(PlexItem*)libp->para[1].ref);
        pobj=new vector<PlexItem,allocator<PlexItem> >::iterator(xobj);
        result7->obj.i=(long)((void*)pobj); result7->ref=result7->obj.i;
        G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_1_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->insert(*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[0])),*((vector<PlexItem,allocator<PlexItem> >::const_iterator*)G__int(libp->para[1]))
,*((vector<PlexItem,allocator<PlexItem> >::const_iterator*)G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_2_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->insert(*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[0])),(vector<PlexItem,allocator<PlexItem> >::size_type)G__int(libp->para[1])
,*(PlexItem*)libp->para[2].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_pop_back_3_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->pop_back();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_erase_4_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->erase(*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_erase_5_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->erase(*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[0])),*((vector<PlexItem,allocator<PlexItem> >::iterator*)G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_clear_6_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((vector<PlexItem,allocator<PlexItem> >*)(G__getstructoffset()))->clear();
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<PlexItem,allocator<PlexItem> > G__TvectorlEPlexItemcOallocatorlEPlexItemgRsPgR;
static int G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_wAvectorlEPlexItemcOallocatorlEPlexItemgRsPgR_7_2(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (vector<PlexItem,allocator<PlexItem> > *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         ((vector<PlexItem,allocator<PlexItem> > *)((G__getstructoffset())+sizeof(vector<PlexItem,allocator<PlexItem> >)*i))->~G__TvectorlEPlexItemcOallocatorlEPlexItemgRsPgR();
   else {
     long G__Xtmp=G__getgvp();
     G__setgvp(G__PVOID);
     ((vector<PlexItem,allocator<PlexItem> > *)(G__getstructoffset()))->~G__TvectorlEPlexItemcOallocatorlEPlexItemgRsPgR();
     G__setgvp(G__Xtmp);
     G__operator_delete((void*)G__getstructoffset());
   }
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Object */
static int G__Object_Class_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)Object::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_Class_Name_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)Object::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_Class_Version_2_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)Object::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_Dictionary_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      Object::Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_IsA_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Object*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_ShowMembers_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Object*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_Streamer_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Object*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_StreamerNVirtual_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Object*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_DeclFileName_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)Object::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_ImplFileLine_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)Object::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_ImplFileName_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)Object::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Object_DeclFileLine_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)Object::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__Object_Object_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Object *p;
   if(G__getaryconstruct()) p=new Object[G__getaryconstruct()];
   else                    p=new Object;
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__dictLN_Object);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Object_Object_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Object *p;
   p=new Object(*(Object*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__dictLN_Object);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Object G__TObject;
static int G__Object_wAObject_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Object *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (Object *)((G__getstructoffset())+sizeof(Object)*i);
   else  delete (Object *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* PlexItem */

/* PlexSTL */

/* vector<PlexItem,allocator<PlexItem> > */

/* Object */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdict {
 public:
  G__Sizep2memfuncdict() {p=&G__Sizep2memfuncdict::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdict::*p)();
};

size_t G__get_sizep2memfuncdict()
{
  G__Sizep2memfuncdict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_PlexSTL))) {
     PlexSTL *G__Lderived;
     G__Lderived=(PlexSTL*)0x1000;
     {
       vector<PlexItem,allocator<PlexItem> > *G__Lpbase=(vector<PlexItem,allocator<PlexItem> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_PlexSTL),G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dictLN_Object))) {
     Object *G__Lderived;
     G__Lderived=(Object*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_Object),G__get_linked_tagnum(&G__dictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dictLN_Object),G__get_linked_tagnum(&G__dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer (int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes (double)",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size (int)",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type (float)",0);
   G__search_typename2("Streamer_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("ShowMembersFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IsAFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",100,-1,0,
-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("vector<PlexItem>",117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.29 2002/07/27 13:41:13 rdm Exp $",0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector_type",117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("__normal_iterator<PlexItem*,vector_type>",117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.29 2002/07/27 13:41:13 rdm Exp $",0);
   G__search_typename2("iterator<std::iterator_traits<PlexItem*>::iterator_category,std::iterator_traits<PlexItem*>::value_type,std::iterator_traits<PlexItem*>::difference_type,std::iterator_traits<PlexItem*>::pointer,std::iterator_traits<PlexItem*>::reference>",117,G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.29 2002/07/27 13:41:13 rdm Exp $",0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator_category",117,G__get_linked_tagnum(&G__dictLN_random_access_iterator_tag),0,G__get_linked_tagnum(&G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("normal_iterator_type",117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("__traits_type",117,G__get_linked_tagnum(&G__dictLN_iterator_traitslEPlexItemmUgR),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator_category",117,G__get_linked_tagnum(&G__dictLN_random_access_iterator_tag),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator",117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__dictLN_PlexItem),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,
G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,
G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("random_access_iterator<PlexItem,difference_type>",117,G__get_linked_tagnum(&G__dictLN_random_access_iteratorlEPlexItemcOlonggR),0,-1);
   G__setnewtype(-1,"// @(#)root/base:$Name:  $:$Id: TROOT.h,v 1.29 2002/07/27 13:41:13 rdm Exp $",0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgRcLcLreverse_iterator),0,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* PlexItem */
static void G__setup_memvarPlexItem(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_PlexItem));
   { PlexItem *p; p=(PlexItem*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PlexSTL */
static void G__setup_memvarPlexSTL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_PlexSTL));
   { PlexSTL *p; p=(PlexSTL*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<PlexItem,allocator<PlexItem> > */
static void G__setup_memvarvectorlEPlexItemcOallocatorlEPlexItemgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   { vector<PlexItem,allocator<PlexItem> > *p; p=(vector<PlexItem,allocator<PlexItem> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* Object */
static void G__setup_memvarObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dictLN_Object));
   { Object *p; p=(Object*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->vect)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__dictLN_PlexSTL),-1,-1,1,"vect=",0,(char*)NULL);
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncPlexItem(void) {
   /* PlexItem */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_PlexItem));
   G__memfunc_setup("PlexItem",808,G__PlexItem_PlexItem_0_0,105,G__get_linked_tagnum(&G__dictLN_PlexItem),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__PlexItem_Class_2_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__PlexItem_Class_Name_3_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__PlexItem_Class_Version_4_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__PlexItem_Dictionary_5_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__PlexItem_IsA_6_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__PlexItem_ShowMembers_7_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__PlexItem_Streamer_8_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PlexItem_StreamerNVirtual_9_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__PlexItem_DeclFileName_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__PlexItem_ImplFileLine_1_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__PlexItem_ImplFileName_2_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__PlexItem_DeclFileLine_3_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("PlexItem",808,G__PlexItem_PlexItem_4_1,(int)('i'),G__get_linked_tagnum(&G__dictLN_PlexItem),-1,0,1,1,1,0,"u 'PlexItem' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~PlexItem",934,G__PlexItem_wAPlexItem_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPlexSTL(void) {
   /* PlexSTL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_PlexSTL));
   G__memfunc_setup("PlexSTL",652,G__PlexSTL_PlexSTL_0_0,105,G__get_linked_tagnum(&G__dictLN_PlexSTL),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class",502,G__PlexSTL_Class_2_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__PlexSTL_Class_Name_3_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__PlexSTL_Class_Version_4_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__PlexSTL_Dictionary_5_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__PlexSTL_IsA_6_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__PlexSTL_ShowMembers_7_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__PlexSTL_Streamer_8_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PlexSTL_StreamerNVirtual_9_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__PlexSTL_DeclFileName_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__PlexSTL_ImplFileLine_1_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__PlexSTL_ImplFileName_2_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__PlexSTL_DeclFileLine_3_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("PlexSTL",652,G__PlexSTL_PlexSTL_4_1,(int)('i'),G__get_linked_tagnum(&G__dictLN_PlexSTL),-1,0,1,1,1,0,"u 'PlexSTL' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~PlexSTL",778,G__PlexSTL_wAPlexSTL_5_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEPlexItemcOallocatorlEPlexItemgRsPgR(void) {
   /* vector<PlexItem,allocator<PlexItem> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR));
   G__memfunc_setup("begin",517,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_begin_0_0,117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),G__defined_typename("vector<PlexItem,allocator<PlexItem> >::iterator"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("end",311,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_end_1_0,117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),G__defined_typename("vector<PlexItem,allocator<PlexItem> >::iterator"),0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("rbegin",631,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_rbegin_2_0,117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgRcLcLreverse_iterator),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("rend",425,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_rend_3_0,117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgRcLcLreverse_iterator),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("size",443,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_size_4_0,104,-1,G__defined_typename("vector<PlexItem,allocator<PlexItem> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("max_size",864,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_max_size_5_0,104,-1,G__defined_typename("vector<PlexItem,allocator<PlexItem> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("capacity",846,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_capacity_6_0,104,-1,G__defined_typename("vector<PlexItem,allocator<PlexItem> >::size_type"),0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("empty",559,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_empty_7_0,103,-1,-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator[]",1060,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_operatoroBcB_8_0,117,G__get_linked_tagnum(&G__dictLN_PlexItem),-1,1,1,1,1,0,"h - 'vector<PlexItem,allocator<PlexItem> >::size_type' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<PlexItem,allocator<PlexItem> >",3556,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_9_0,105,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<PlexItem,allocator<PlexItem> >",3556,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_0_1,105,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),-1,0,2,1,1,0,
"h - 'vector<PlexItem,allocator<PlexItem> >::size_type' 0 - n u 'PlexItem' - 11 PlexItem() value",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<PlexItem,allocator<PlexItem> >",3556,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_1_1,105,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),-1,0,1,1,1,0,"u 'vector<PlexItem,allocator<PlexItem> >' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("vector<PlexItem,allocator<PlexItem> >",3556,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_2_1,105,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),-1,0,2,1,1,0,
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::const_iterator' 0 - first u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::const_iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("operator=",937,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_operatoreQ_4_1,117,G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),-1,1,1,1,1,0,"u 'vector<PlexItem,allocator<PlexItem> >' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("reserve",764,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_reserve_5_1,121,-1,-1,0,1,1,1,0,"h - 'vector<PlexItem,allocator<PlexItem> >::size_type' 0 - n",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("front",553,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_front_6_1,117,G__get_linked_tagnum(&G__dictLN_PlexItem),-1,1,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("back",401,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_back_7_1,117,G__get_linked_tagnum(&G__dictLN_PlexItem),-1,1,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("push_back",944,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_push_back_8_1,121,-1,-1,0,1,1,1,0,"u 'PlexItem' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("swap",443,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_swap_9_1,121,-1,-1,0,1,1,1,0,"u 'vector<PlexItem,allocator<PlexItem> >' - 1 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_0_2,117,G__get_linked_tagnum(&G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR),G__defined_typename("vector<PlexItem,allocator<PlexItem> >::iterator"),0,2,1,1,0,
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - position u 'PlexItem' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_1_2,121,-1,-1,0,3,1,1,0,
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - position u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::const_iterator' 0 - first "
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::const_iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("insert",661,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_insert_2_2,121,-1,-1,0,3,1,1,0,
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - position h - 'vector<PlexItem,allocator<PlexItem> >::size_type' 0 - n "
"u 'PlexItem' - 11 - x",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("pop_back",831,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_pop_back_3_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("erase",528,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_erase_4_2,121,-1,-1,0,1,1,1,0,"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - position",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("erase",528,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_erase_5_2,121,-1,-1,0,2,1,1,0,
"u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - first u '__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >' 'vector<PlexItem,allocator<PlexItem> >::iterator' 0 - last",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("clear",519,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_clear_6_2,121,-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~vector<PlexItem,allocator<PlexItem> >",3682,G__vectorlEPlexItemcOallocatorlEPlexItemgRsPgR_wAvectorlEPlexItemcOallocatorlEPlexItemgRsPgR_7_2,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncObject(void) {
   /* Object */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dictLN_Object));
   G__memfunc_setup("Class",502,G__Object_Class_0_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Object_Class_Name_1_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Object_Class_Version_2_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Object_Dictionary_3_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Object_IsA_4_0,85,G__get_linked_tagnum(&G__dictLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Object_ShowMembers_5_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Object_Streamer_6_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Object_StreamerNVirtual_7_0,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Object_DeclFileName_8_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Object_ImplFileLine_9_0,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Object_ImplFileName_0_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Object_DeclFileLine_1_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic default constructor
   G__memfunc_setup("Object",599,G__Object_Object_2_1,(int)('i'),G__get_linked_tagnum(&G__dictLN_Object),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("Object",599,G__Object_Object_3_1,(int)('i'),G__get_linked_tagnum(&G__dictLN_Object),-1,0,1,1,1,0,"u 'Object' - 11 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Object",725,G__Object_wAObject_4_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__dictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__dictLN_random_access_iterator_tag = { "random_access_iterator_tag" , 115 , -1 };
G__linked_taginfo G__dictLN_PlexItem = { "PlexItem" , 99 , -1 };
G__linked_taginfo G__dictLN_PlexSTL = { "PlexSTL" , 99 , -1 };
G__linked_taginfo G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR = { "vector<PlexItem,allocator<PlexItem> >" , 99 , -1 };
G__linked_taginfo G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR = { "__normal_iterator<PlexItem*,vector<PlexItem,allocator<PlexItem> > >" , 99 , -1 };
G__linked_taginfo G__dictLN_iterator_traitslEPlexItemmUgR = { "iterator_traits<PlexItem*>" , 115 , -1 };
G__linked_taginfo G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR = { "iterator<random_access_iterator_tag,PlexItem,long,PlexItem*,PlexItem&>" , 115 , -1 };
G__linked_taginfo G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgRcLcLreverse_iterator = { "vector<PlexItem,allocator<PlexItem> >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__dictLN_random_access_iteratorlEPlexItemcOlonggR = { "random_access_iterator<PlexItem,long>" , 115 , -1 };
G__linked_taginfo G__dictLN_Object = { "Object" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledict() {
  G__dictLN_TClass.tagnum = -1 ;
  G__dictLN_TObject.tagnum = -1 ;
  G__dictLN_TNamed.tagnum = -1 ;
  G__dictLN_random_access_iterator_tag.tagnum = -1 ;
  G__dictLN_PlexItem.tagnum = -1 ;
  G__dictLN_PlexSTL.tagnum = -1 ;
  G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR.tagnum = -1 ;
  G__dictLN___normal_iteratorlEPlexItemmUcOvectorlEPlexItemcOallocatorlEPlexItemgRsPgRsPgR.tagnum = -1 ;
  G__dictLN_iterator_traitslEPlexItemmUgR.tagnum = -1 ;
  G__dictLN_iteratorlErandom_access_iterator_tagcOPlexItemcOlongcOPlexItemmUcOPlexItemaNgR.tagnum = -1 ;
  G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__dictLN_random_access_iteratorlEPlexItemcOlonggR.tagnum = -1 ;
  G__dictLN_Object.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledict() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__dictLN_PlexItem),sizeof(PlexItem),-1,263424,(char*)NULL,G__setup_memvarPlexItem,G__setup_memfuncPlexItem);
   G__tagtable_setup(G__get_linked_tagnum(&G__dictLN_PlexSTL),sizeof(PlexSTL),-1,263424,(char*)NULL,G__setup_memvarPlexSTL,G__setup_memfuncPlexSTL);
   G__tagtable_setup(G__get_linked_tagnum(&G__dictLN_vectorlEPlexItemcOallocatorlEPlexItemgRsPgR),sizeof(vector<PlexItem,allocator<PlexItem> >),-1,265984,(char*)NULL,G__setup_memvarvectorlEPlexItemcOallocatorlEPlexItemgRsPgR,G__setup_memfuncvectorlEPlexItemcOallocatorlEPlexItemgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__dictLN_Object),sizeof(Object),-1,290816,(char*)NULL,G__setup_memvarObject,G__setup_memfuncObject);
}
extern "C" void G__cpp_setupdict(void) {
  G__check_setup_version(30051515,"G__cpp_setupdict()");
  G__set_cpp_environmentdict();
  G__cpp_setup_tagtabledict();

  G__cpp_setup_inheritancedict();

  G__cpp_setup_typetabledict();

  G__cpp_setup_memvardict();

  G__cpp_setup_memfuncdict();
  G__cpp_setup_globaldict();
  G__cpp_setup_funcdict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdict();
  return;
}
class G__cpp_setup_initdict {
  public:
    G__cpp_setup_initdict() { G__add_setup_func("dict",(G__incsetup)(&G__cpp_setupdict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdict() { G__remove_setup_func("dict"); }
};
G__cpp_setup_initdict G__cpp_setup_initializerdict;

