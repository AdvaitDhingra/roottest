CLEAN_TARGETS += *.so Class*.root typedef*.root $(ALL_LIBRARIES) *.clog *.log *.tmp *.xml arr.root FixedArray*.root boolUpdate.root  data.root  skiptestfile.root
TEST_TARGETS += foreign310 boolUpdate skip ClassConv ConvArray typedef Missing FixedArrayLengthChange ClonesArrayEvo

ifeq ($(strip $(ROOTTEST_HOME)),)
	export ROOTTEST_HOME := $(shell expr $(PWD) : '\(.*/roottest/\)')
endif

include $(ROOTTEST_HOME)/scripts/Rules.mk


ifeq ($(FAIL),)
ConvArray: readold.log
	$(WarnFailTest)
else
ConvArray: readold.log readnew.log
endif

ClassConv: ClassConv.log
	$(TestDiff)

data.root: MyClassOld_cxx.$(DllSuf)
	$(CMDECHO) $(CALLROOTEXE) -q -b -l write.C > write.log 

readold.log: MyClassOld_cxx.$(DllSuf) data.root
	$(CMDECHO) $(CALLROOTEXE) -q -b -l readold.C > readold.log 2>&1

readnew.log: MyClass_C.$(DllSuf) data.root
	$(CMDECHO) $(CALLROOTEXE) -q -b -l readnew.C > readnew.log 2>&1

ClassConv.root: ClassConvOld_cxx.$(DllSuf)  ClassConvWriteOld.cxx
	$(CMDECHO) $(CALLROOTEXE) -q -b -l ClassConvWriteOld.cxx > ClassConvWriteOld.log

ClassConvReadOld.log: ClassConvOld_cxx.$(DllSuf) ClassConv.root ClassConvReadOld.cxx 
	$(CMDECHO) $(CALLROOTEXE) -q -b -l ClassConvReadOld.cxx > ClassConvReadOld.log

ClassConvNew.root: ClassConvNew_cxx.$(DllSuf) ClassConvWriteNew.cxx
	$(CMDECHO) $(CALLROOTEXE) -q -b -l ClassConvWriteNew.cxx > ClassConvWriteNew.log

ClassConv.log: ClassConv.root ClassConvNew.root ClassConvNew_cxx.$(DllSuf)  ClassConvOther_cxx.$(DllSuf) ClassConvReadOld.log
	$(CMDECHO) $(CALLROOTEXE) -q -b -l ClassConvReadNew.cxx > ClassConv.log 2>&1 
	$(CMDECHO) $(CALLROOTEXE) -q -b -l ClassConvReadOther.cxx >> ClassConv.log 2>&1 

typedef.root : $(ROOTCORELIBS) typedefWrite_C.$(DllSuf)
	$(CMDECHO) $(CALLROOTEXE) -q -b -l typedefWrite.C+ > typedefWrite.log

typedef.log: typedef.root

typedef: typedef.log
	$(TestDiff)

skipWrite.log: skipWrite_C.$(DllSuf) $(ROOTCORELIBS)
	$(CMDECHO) $(CALLROOTEXE) -q -b -l skipWrite.C+ > skipWrite.log

skip.log: skipWrite.log skipRead_C.$(DllSuf)
	$(CMDECHO) $(CALLROOTEXE) -q -b -l runSkip.C 2>&1 | sed -e's/method=.*//' > skip.log 

skip: skip.log
	$(TestDiff)

boolUpdate.root: boolUpdate.keeproot
	$(CMDECHO) cp boolUpdate.keeproot boolUpdate.root

boolUpdate.log: boolUpdate_C.$(DllSuf) boolUpdate.root

boolUpdate: boolUpdate.log
	$(TestDiff)

foreign310.log: cms_cxx.$(DllSuf)

foreign310: foreign310.log
	$(TestDiff)

Missing: Missing.log
	$(TestDiff)

fixarr1_C.$(DllSuf) : fixarr.h
fixarr2_C.$(DllSuf) : fixarr.h
fixarr3_C.$(DllSuf) : fixarr.h
 
fixarr.log: fixarr1_C.$(DllSuf) fixarr2_C.$(DllSuf) fixarr3_C.$(DllSuf)
	$(CMDECHO) ( $(CALLROOTEXE) -q -b -l fixarr1.C+ && \
		$(CALLROOTEXE) -q -b -l fixarr2.C+ && \
		$(CALLROOTEXE) -q -b -l fixarr3.C+ ) \
		 > fixarr.log 2>&1

fixarr: fixarr.log
	$(TestDiff)

.PHONY: WriteFixedArrayOld WriteFixedArrayNew
.PHONY: ReadFixedArrayOldWithNew ReadFixedArrayNewWithOld

FixedArrayLengthChange: WriteFixedArrayOld WriteFixedArrayNew
	$(CMDECHO) $(MAKE) ReadFixedArrayOldWithNew
	$(CMDECHO) $(MAKE) ReadFixedArrayNewWithOld

WriteFixedArrayOld : WriteFixedArrayOld.clog
	$(TestDiff)

WriteFixedArrayNew : WriteFixedArrayNew.clog
	$(TestDiff)

ReadFixedArrayOldWithNew : ReadFixedArrayOldWithNew.clog
	$(TestDiff)

ReadFixedArrayNewWithOld : ReadFixedArrayNewWithOld.clog
	$(TestDiff)

ClonesArrayEvo.log: Event_3_cxx.$(DllSuf)

ClonesArrayEvo: ClonesArrayEvo.log
	$(TestDiff)
