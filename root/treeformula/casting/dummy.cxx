//
// File generated by rootcint at Thu Apr 25 16:36:06 2002.
// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#ifndef R__ACCESS_IN_SYMBOL
//Break the privacy of classes
#define private public
#define protected public
#endif

#include "dummy.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

#include "RtypesImp.h"

namespace ROOT {
   namespace Shadow {
      typedef ::Simple Simple;

   } // Of namespace ROOT::Shadow
} // Of namespace ROOT

namespace ROOT {
   void ShowMembers(Simple *obj, TMemberInspector &R__insp, char *R__parent);

   // Function generating the singleton Type initializer
   template <> ROOT::ClassInfo< Simple > &GenerateInitInstance< Simple >(const Simple*)
   {
      // Make sure the shadow class has the right sizeof
      Assert(sizeof(::Simple)==sizeof(ROOT::Shadow::Simple));
      static ROOT::ClassInfo< Simple > 
         instance("Simple",Simple::Class_Version(),"Simple.h",10,
                  &ROOT::ShowMembers,0);
      return instance;
   }
   // Static variable to force the class initialization
   static ROOT::ClassInfo< Simple > & _R__UNIQUE_(Init) 
      = GenerateInitInstance((const Simple*)0x0);
}

//______________________________________________________________________________
// Static variable to hold class pointer
TClass *Simple::fgIsA = 0;

//______________________________________________________________________________
const char *Simple::Class_Name()
{
   // Return the class name for Simple.
   return "Simple";
}

//______________________________________________________________________________
const char* Simple::ImplFileName()
{
   return ROOT::ClassInfo< Simple >::GetImplFileName();
}

//______________________________________________________________________________
int   Simple::ImplFileLine()
{
   return ROOT::ClassInfo< Simple >::GetImplFileLine();
}

//______________________________________________________________________________
void Simple::Dictionary()
{
   fgIsA = ROOT::ClassInfo< Simple >::GetClass();
}

//______________________________________________________________________________
TClass *Simple::Class()
{
   if (!fgIsA) fgIsA = ROOT::ClassInfo< Simple >::GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Simple::Streamer(TBuffer &R__b)
{
   // Stream an object of class Simple.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fID;
      R__b >> fShape;
      R__b.CheckByteCount(R__s, R__c, Simple::IsA());
   } else {
      R__c = R__b.WriteVersion(Simple::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fID;
      R__b << fShape;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
#ifdef R__ACCESS_IN_SYMBOL
void ROOT__ShowMembersFunc(Simple *obj, TMemberInspector &R__insp, char *R__parent)
   {
#else
namespace ROOT {
   void ShowMembers(Simple *obj, TMemberInspector &R__insp, char *R__parent)
   {
#endif
      typedef ROOT::Shadow::Simple ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      sobj = sobj; // Dummy usage just in case there is no datamember.

      // Inspect the data members of an object of class Simple.

      TClass *R__cl  = ROOT::ClassInfo< Simple >::GetClass();
      Int_t   R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fID", &sobj->fID);
      R__insp.Inspect(R__cl, R__parent, "*fShape", &sobj->fShape);
      sobj->TObject::ShowMembers(R__insp, R__parent);
   }
#ifdef R__ACCESS_IN_SYMBOL
namespace ROOT {
   void ShowMembers(Simple *obj, TMemberInspector &R__insp, char *R__parent)
   {
      ROOT__ShowMembersFunc(obj,R__insp,R__parent);
   }

#endif
}

void Simple::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
   ROOT::ShowMembers(this, R__insp, R__parent);
}

/********************************************************
* dummy.cxx
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtabledummy();

extern "C" void G__set_cpp_environmentdummy() {
  G__add_compiledheader("TROOT.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Simple.cxx");
  G__cpp_reset_tagtabledummy();
}
class G__dummydOcxx_tag {};

void* operator new(size_t size,G__dummydOcxx_tag* p) {
  if(p && G__PVOID!=G__getgvp()) return((void*)p);
#ifndef G__ROOT
  return(malloc(size));
#else
  return(::operator new(size));
#endif
}

/* dummy, for exception */
#ifdef G__EH_DUMMY_DELETE
void operator delete(void *p,G__dummydOcxx_tag* x) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}
#endif

static void G__operator_delete(void *p) {
  if((long)p==G__getgvp() && G__PVOID!=G__getgvp()) return;
#ifndef G__ROOT
  free(p);
#else
  ::operator delete(p);
#endif
}

void G__DELDMY_dummydOcxx() { G__operator_delete(0); }

extern "C" int G__cpp_dllrevdummy() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Simple */
static int G__Simple_Simple_0_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Simple *p=NULL;
   if(G__getaryconstruct()) p=new Simple[G__getaryconstruct()];
   else                    p=new Simple;
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dummyLN_Simple);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Simple_1_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   Simple *p=NULL;
      p = new Simple((Int_t)G__int(libp->para[0]),(TShape*)G__int(libp->para[1]));
      result7->obj.i = (long)p;
      result7->ref = (long)p;
      result7->type = 'u';
      result7->tagnum = G__get_linked_tagnum(&G__dummyLN_Simple);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Print_3_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   switch(libp->paran) {
   case 1:
      G__setnull(result7);
      ((const Simple*)(G__getstructoffset()))->Print((Option_t*)G__int(libp->para[0]));
      break;
   case 0:
      G__setnull(result7);
      ((const Simple*)(G__getstructoffset()))->Print();
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Class_4_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((Simple*)(G__getstructoffset()))->Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Class_Name_5_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Simple*)(G__getstructoffset()))->Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Class_Version_6_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,115,(long)((Simple*)(G__getstructoffset()))->Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Dictionary_7_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Simple*)(G__getstructoffset()))->Dictionary();
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_IsA_8_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,85,(long)((const Simple*)(G__getstructoffset()))->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_ShowMembers_9_0(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Simple*)(G__getstructoffset()))->ShowMembers(*(TMemberInspector*)libp->para[0].ref,(char*)G__int(libp->para[1]));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_Streamer_0_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Simple*)(G__getstructoffset()))->Streamer(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_StreamerNVirtual_1_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__setnull(result7);
      ((Simple*)(G__getstructoffset()))->StreamerNVirtual(*(TBuffer*)libp->para[0].ref);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_DeclFileName_2_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Simple*)(G__getstructoffset()))->DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_DeclFileLine_3_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Simple*)(G__getstructoffset()))->DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_ImplFileName_4_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,67,(long)((Simple*)(G__getstructoffset()))->ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Simple_ImplFileLine_5_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
      G__letint(result7,105,(long)((Simple*)(G__getstructoffset()))->ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Simple_Simple_6_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash)
{
   Simple *p;
   p=new Simple(*(Simple*)G__int(libp->para[0]));
   result7->obj.i = (long)p;
   result7->ref = (long)p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__dummyLN_Simple);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Simple G__TSimple;
static int G__Simple_wASimple_7_1(G__value *result7,G__CONST char *funcname,struct G__param *libp,int hash) {
   if(0==G__getstructoffset()) return(1);
   if(G__getaryconstruct())
     if(G__PVOID==G__getgvp())
       delete[] (Simple *)(G__getstructoffset());
     else
       for(int i=G__getaryconstruct()-1;i>=0;i--)
         delete (Simple *)((G__getstructoffset())+sizeof(Simple)*i);
   else  delete (Simple *)(G__getstructoffset());
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Simple */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncdummy {
 public:
  G__Sizep2memfuncdummy() {p=&G__Sizep2memfuncdummy::sizep2memfunc;}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncdummy::*p)();
};

size_t G__get_sizep2memfuncdummy()
{
  G__Sizep2memfuncdummy a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancedummy() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__dummyLN_Simple))) {
     Simple *G__Lderived;
     G__Lderived=(Simple*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__dummyLN_Simple),G__get_linked_tagnum(&G__dummyLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetabledummy() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,
-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,
-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,
-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,
-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,
-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Seek_t",105,-1,0,
-1);
   G__setnewtype(-1,"File pointer (int)",0);
   G__search_typename2("Long_t",108,-1,0,
-1);
   G__setnewtype(-1,"Signed long integer 4 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,
-1);
   G__setnewtype(-1,"Unsigned long integer 4 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,
-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,
-1);
   G__setnewtype(-1,"Float 8 bytes (double)",0);
   G__search_typename2("Text_t",99,-1,0,
-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,
-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Byte_t",98,-1,0,
-1);
   G__setnewtype(-1,"Byte (8 bits) (unsigned char)",0);
   G__search_typename2("Version_t",115,-1,0,
-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,0,
-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Ssiz_t",105,-1,0,
-1);
   G__setnewtype(-1,"String size (int)",0);
   G__search_typename2("Real_t",102,-1,0,
-1);
   G__setnewtype(-1,"TVector and TMatrix element type (float)",0);
   G__search_typename2("Streamer_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("VoidFuncPtr_t",89,-1,0,
-1);
   G__setnewtype(-1,"pointer to void function",0);
   G__search_typename2("ShowMembersFunc_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("IsAFunc_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("FreeHookFun_t",89,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ReAllocCFun_t",81,-1,0,
-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Axis_t",100,-1,0,
-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("Stat_t",100,-1,0,
-1);
   G__setnewtype(-1,"Statistics type (double)",0);
   G__search_typename2("Font_t",115,-1,0,
-1);
   G__setnewtype(-1,"Font number (short)",0);
   G__search_typename2("Style_t",115,-1,0,
-1);
   G__setnewtype(-1,"Style number (short)",0);
   G__search_typename2("Marker_t",115,-1,0,
-1);
   G__setnewtype(-1,"Marker number (short)",0);
   G__search_typename2("Width_t",115,-1,0,
-1);
   G__setnewtype(-1,"Line width (short)",0);
   G__search_typename2("Color_t",115,-1,0,
-1);
   G__setnewtype(-1,"Color number (short)",0);
   G__search_typename2("SCoord_t",115,-1,0,
-1);
   G__setnewtype(-1,"Screen coordinates (short)",0);
   G__search_typename2("Coord_t",100,-1,0,
-1);
   G__setnewtype(-1,"Pad world coordinates (double)",0);
   G__search_typename2("Angle_t",102,-1,0,
-1);
   G__setnewtype(-1,"Graphics angle (float)",0);
   G__search_typename2("Size_t",102,-1,0,
-1);
   G__setnewtype(-1,"Attribute size (float)",0);
   G__search_typename2("X3DBuffer",117,G__get_linked_tagnum(&G__dummyLN__x3d_data_),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Size3D",117,G__get_linked_tagnum(&G__dummyLN__x3d_sizeof_),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Simple */
static void G__setup_memvarSimple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__dummyLN_Simple));
   { Simple *p; p=(Simple*)0x1000; if (p) { }
   G__memvar_setup((void*)NULL,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fID=",0,"id number");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__dummyLN_TShape),-1,-1,4,"fShape=",0,"pointer to base class shape");
   G__memvar_setup((void*)NULL,85,0,0,G__get_linked_tagnum(&G__dummyLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvardummy() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSimple(void) {
   /* Simple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__dummyLN_Simple));
   G__memfunc_setup("Simple",618,G__Simple_Simple_0_0,105,G__get_linked_tagnum(&G__dummyLN_Simple),-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Simple",618,G__Simple_Simple_1_0,105,G__get_linked_tagnum(&G__dummyLN_Simple),-1,0,2,1,1,0,
"i - 'Int_t' 0 - id U 'TShape' - 0 - shape",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Print",525,G__Simple_Print_3_0,121,-1,-1,0,1,1,1,8,"C - 'Option_t' 0 \"\" option",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Class",502,G__Simple_Class_4_0,85,G__get_linked_tagnum(&G__dummyLN_TClass),-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Name",982,G__Simple_Class_Name_5_0,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Class_Version",1339,G__Simple_Class_Version_6_0,115,-1,G__defined_typename("Version_t"),0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("Dictionary",1046,G__Simple_Dictionary_7_0,121,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("IsA",253,G__Simple_IsA_8_0,85,G__get_linked_tagnum(&G__dummyLN_TClass),-1,0,0,1,1,8,"",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("ShowMembers",1132,G__Simple_ShowMembers_9_0,121,-1,-1,0,2,1,1,0,
"u 'TMemberInspector' - 1 - insp C - - 0 - parent",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("Streamer",835,G__Simple_Streamer_0_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Simple_StreamerNVirtual_1_1,121,-1,-1,0,1,1,1,0,"u 'TBuffer' - 1 - b",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileName",1145,G__Simple_DeclFileName_2_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("DeclFileLine",1152,G__Simple_DeclFileLine_3_1,105,-1,-1,0,0,3,1,0,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileName",1171,G__Simple_ImplFileName_4_1,67,-1,-1,0,0,3,1,1,"",(char*)NULL,(void*)NULL,0);
   G__memfunc_setup("ImplFileLine",1178,G__Simple_ImplFileLine_5_1,105,-1,-1,0,0,3,1,0,"","Simple class",(void*)NULL,0);
   // automatic copy constructor
   G__memfunc_setup("Simple",618,G__Simple_Simple_6_1,(int)('i'),G__get_linked_tagnum(&G__dummyLN_Simple),-1,0,1,1,1,0,"u 'Simple' - 1 - -",(char*)NULL,(void*)NULL,0);
   // automatic destructor
   G__memfunc_setup("~Simple",744,G__Simple_wASimple_7_1,(int)('y'),-1,-1,0,0,1,1,0,"",(char*)NULL,(void*)NULL,1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncdummy() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globaldummy() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcdummy() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__dummyLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__dummyLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__dummyLN__x3d_data_ = { "_x3d_data_" , 115 , -1 };
G__linked_taginfo G__dummyLN__x3d_sizeof_ = { "_x3d_sizeof_" , 115 , -1 };
G__linked_taginfo G__dummyLN_TShape = { "TShape" , 99 , -1 };
G__linked_taginfo G__dummyLN_Simple = { "Simple" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtabledummy() {
  G__dummyLN_TClass.tagnum = -1 ;
  G__dummyLN_TObject.tagnum = -1 ;
  G__dummyLN__x3d_data_.tagnum = -1 ;
  G__dummyLN__x3d_sizeof_.tagnum = -1 ;
  G__dummyLN_TShape.tagnum = -1 ;
  G__dummyLN_Simple.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtabledummy() {

   /* Setting up class,struct,union tag entry */
   G__tagtable_setup(G__get_linked_tagnum(&G__dummyLN_Simple),sizeof(Simple),-1,29952,"Simple class",G__setup_memvarSimple,G__setup_memfuncSimple);
}
extern "C" void G__cpp_setupdummy(void) {
  G__check_setup_version(30051515,"G__cpp_setupdummy()");
  G__set_cpp_environmentdummy();
  G__cpp_setup_tagtabledummy();

  G__cpp_setup_inheritancedummy();

  G__cpp_setup_typetabledummy();

  G__cpp_setup_memvardummy();

  G__cpp_setup_memfuncdummy();
  G__cpp_setup_globaldummy();
  G__cpp_setup_funcdummy();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncdummy();
  return;
}
class G__cpp_setup_initdummy {
  public:
    G__cpp_setup_initdummy() { G__add_setup_func("dummy",(G__incsetup)(&G__cpp_setupdummy)); G__call_setup_funcs(); }
   ~G__cpp_setup_initdummy() { G__remove_setup_func("dummy"); }
};
G__cpp_setup_initdummy G__cpp_setup_initializerdummy;

